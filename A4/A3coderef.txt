:param {  
  idsToSkip: [],
  file_path_root: 'file:///', 
  file_0: 'stackoverflow.nodes.Question.csv',
  file_1: 'stackoverflow.nodes.Answer.csv',
  file_2: 'stackoverflow.nodes.Comment.csv',
  file_3: 'stackoverflow.nodes.User.csv',
  file_4: 'stackoverflow.nodes.Tag.csv',
  file_5: 'stackoverflow.relationships.ANSWERED.csv',
  file_6: 'stackoverflow.relationships.TAGGED.csv',
  file_7: 'stackoverflow.relationships.ASKED.csv',
  file_8: 'stackoverflow.relationships.COMMENTED.csv',
  file_9: 'stackoverflow.relationships.COMMENTED_ON.csv',
  file_10: 'stackoverflow.relationships.PROVIDED.csv'
};
// CONSTRAINT creation
// -------------------
//
// Create node uniqueness constraints, ensuring no duplicates for the given node label and ID property exist in the database. This also ensures no duplicates are introduced in future.
//
// NOTE: The following constraint creation syntax is generated based on the current connected database version 5.23-aura.
CREATE CONSTRAINT `question_id_Question_uniq` IF NOT EXISTS
FOR (n: `Question`)
REQUIRE (n.`question_id`) IS UNIQUE;
CREATE CONSTRAINT `answer_id_Answer_uniq` IF NOT EXISTS
FOR (n: `Answer`)
REQUIRE (n.`answer_id`) IS UNIQUE;
CREATE CONSTRAINT `comment_id_Comment_uniq` IF NOT EXISTS
FOR (n: `Comment`)
REQUIRE (n.`comment_id`) IS UNIQUE;
CREATE CONSTRAINT `user_id_User_uniq` IF NOT EXISTS
FOR (n: `User`)
REQUIRE (n.`user_id`) IS UNIQUE;
CREATE CONSTRAINT `tag_id_Tag_uniq` IF NOT EXISTS
FOR (n: `Tag`)
REQUIRE (n.`tag_id`) IS UNIQUE;
// INDEX creation
// -------------------
//
// Create node indexes
//
CREATE INDEX `uuid_Question` IF NOT EXISTS
FOR (n: `Question`)
ON (n.`uuid`);
CREATE INDEX `uuid_Answer` IF NOT EXISTS
FOR (n: `Answer`)
ON (n.`uuid`);
CREATE INDEX `uuid_Comment` IF NOT EXISTS
FOR (n: `Comment`)
ON (n.`uuid`);
CREATE INDEX `uuid_User` IF NOT EXISTS
FOR (n: `User`)
ON (n.`uuid`);
CREATE INDEX `name_Tag` IF NOT EXISTS
FOR (n: `Tag`)
ON (n.`name`);
// NODE load
// ---------
//
// Load nodes in batches, one node label at a time. Nodes will be created using a MERGE statement to ensure a node with the same label and ID property remains unique. Pre-existing nodes found by a MERGE statement will have their other properties set to the latest values encountered in a load file.
//
// NOTE: Any nodes with IDs in the 'idsToSkip' list parameter will not be loaded.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`question_id` IN $idsToSkip AND NOT toInteger(trim(row.`question_id`)) IS NULL
CALL {
  WITH row
  MERGE (n: `Question` { `question_id`: toInteger(trim(row.`question_id`)) })
  SET n.`question_id` = toInteger(trim(row.`question_id`))
  SET n.`link` = row.`link`
  SET n.`accepted_answer_id` = toInteger(trim(row.`accepted_answer_id`))
  SET n.`creation_date` = toInteger(trim(row.`creation_date`))
  SET n.`view_count` = toInteger(trim(row.`view_count`))
  SET n.`answer_count` = toInteger(trim(row.`answer_count`))
  SET n.`body_markdown` = row.`body_markdown`
  SET n.`uuid` = toInteger(trim(row.`uuid`))
  SET n.`title` = row.`title`
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row
WHERE NOT row.`answer_id` IN $idsToSkip AND NOT toInteger(trim(row.`answer_id`)) IS NULL
CALL {
  WITH row
  MERGE (n: `Answer` { `answer_id`: toInteger(trim(row.`answer_id`)) })
  SET n.`answer_id` = toInteger(trim(row.`answer_id`))
  SET n.`link` = row.`link`
  SET n.`title` = row.`title`
  SET n.`is_accepted` = toLower(trim(row.`is_accepted`)) IN ['1','true','yes']
  SET n.`body_markdown` = row.`body_markdown`
  SET n.`score` = toInteger(trim(row.`score`))
  SET n.`uuid` = toInteger(trim(row.`uuid`))
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_2) AS row
WITH row
WHERE NOT row.`comment_id` IN $idsToSkip AND NOT toInteger(trim(row.`comment_id`)) IS NULL
CALL {
  WITH row
  MERGE (n: `Comment` { `comment_id`: toInteger(trim(row.`comment_id`)) })
  SET n.`comment_id` = toInteger(trim(row.`comment_id`))
  SET n.`score` = toInteger(trim(row.`score`))
  SET n.`uuid` = toInteger(trim(row.`uuid`))
  SET n.`link` = row.`link`
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_3) AS row
WITH row
WHERE NOT row.`user_id` IN $idsToSkip AND NOT toInteger(trim(row.`user_id`)) IS NULL
CALL {
  WITH row
  MERGE (n: `User` { `user_id`: toInteger(trim(row.`user_id`)) })
  SET n.`user_id` = toInteger(trim(row.`user_id`))
  SET n.`uuid` = toInteger(trim(row.`uuid`))
  SET n.`display_name` = row.`display_name`
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_4) AS row
WITH row
WHERE NOT row.`tag_id` IN $idsToSkip AND NOT toInteger(trim(row.`tag_id`)) IS NULL
CALL {
  WITH row
  MERGE (n: `Tag` { `tag_id`: toInteger(trim(row.`tag_id`)) })
  SET n.`tag_id` = toInteger(trim(row.`tag_id`))
  SET n.`name` = row.`name`
  SET n.`link` = row.`link`
};
// RELATIONSHIP load
// -----------------
//
// Load relationships in batches, one relationship type at a time. Relationships are created using a MERGE statement, meaning only one relationship of a given type will ever be created between a pair of nodes.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_5) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Answer` { `answer_id`: toInteger(trim(row.`answer_id`)) })
  MATCH (target: `Question` { `question_id`: toInteger(trim(row.`question_id`)) })
  MERGE (source)-[r: `ANSWERED`]->(target)
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_6) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Question` { `question_id`: toInteger(trim(row.`question_id`)) })
  MATCH (target: `Tag` { `tag_id`: toInteger(trim(row.`tag_id`)) })
  MERGE (source)-[r: `TAGGED`]->(target)
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_7) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `User` { `user_id`: toInteger(trim(row.`user_id`)) })
  MATCH (target: `Question` { `question_id`: toInteger(trim(row.`question_id`)) })
  MERGE (source)-[r: `ASKED`]->(target)
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_8) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `User` { `user_id`: toInteger(trim(row.`user_id`)) })
  MATCH (target: `Comment` { `comment_id`: toInteger(trim(row.`comment_id`)) })
  MERGE (source)-[r: `COMMENTED`]->(target)
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_9) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Comment` { `comment_id`: toInteger(trim(row.`comment_id`)) })
  MATCH (target: `Question` { `question_id`: toInteger(trim(row.`question_id`)) })
  MERGE (source)-[r: `COMMENTED_ON`]->(target)
};
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_10) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `User` { `user_id`: toInteger(trim(row.`user_id`)) })
  MATCH (target: `Answer` { `answer_id`: toInteger(trim(row.`answer_id`)) })
  MERGE (source)-[r: `PROVIDED`]->(target)
} ;